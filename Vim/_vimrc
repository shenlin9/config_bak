"判定当前操作系统类型
if(has("win32") || has("win95") || has("win64") || has("win16"))
    let g:iswindows=1
else
    let g:iswindows=0
endif

set nocompatible
filetype plugin indent on

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=2000

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

"--------------------插件管理--------------------

call plug#begin()

" Vim 中文手册
"Plug 'yianwillis/vimcdoc'

" 目录树
""if has('nvim')
"  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
"else
"  Plug 'Shougo/defx.nvim'
"  Plug 'roxma/nvim-yarp'
"  Plug 'roxma/vim-hug-neovim-rpc'
"endif
"
" 开始界面
Plug 'mhinz/vim-startify'

" colorscheme
Plug 'morhetz/gruvbox'

" 光标所在单词下面加下划线
Plug 'itchyny/vim-cursorword'

" 缩进对齐线
Plug 'Yggdroot/indentLine'

" 状态条和 buffer 条
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'

" Go 引擎 
"Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Markdown 语法高亮,第一个是依赖插件
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" Markdown 预览插件
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }

" 自动完成
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" 中英文排版时加空格
Plug 'hotoo/pangu.vim'

" 代码对齐
Plug 'junegunn/vim-easy-align'

" 快速定位
Plug 'easymotion/vim-easymotion'

" 括号、引号等自动配对
"Plug 'jiangmiao/auto-pairs'

" 使得成对符号的操作更容易
" Surround.vim is all about 'surroundings': parentheses, brackets, quotes, XML
" tags, and more. The plugin provides mappings to easily delete, change and add
" such surroundings in pairs.
Plug 'tpope/vim-surround'

" . 的增强版
Plug 'tpope/vim-repeat'

" 注释插件
Plug 'tpope/vim-commentary'

" git
" Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" snippets 代码库
" snippets 引擎使用的是 coc.nvim 的 coc-snippets
" 使用 coc 自带的 CocInstall 功能安装
Plug 'honza/vim-snippets'

" vimwiki
Plug 'vimwiki/vimwiki'

" 显示缓冲区内容的上下文
Plug 'wellle/context.vim'

" 拼音首字母搜索
Plug 'jianshanbushishan/vim-PYSearch'

" 自动保存
Plug 'vim-scripts/vim-auto-save'

call plug#end()

"--------------------colorscheme--------------------

"设置配色方案
"必须有这一行
"set t_Co=256
"否则单这一行出错
"colorscheme solarized
"let g:solarized_termcolors=256

set background=dark
colorscheme gruvbox

"----------------------------------------------------------------
let mapleader = ";"

"检测文件编码顺序
set fileencodings=utf-8,ucs-bom,chinese,cp936,gb18030,big5,euc-jp,euc-kr,latinl
"设置vim终端显示编码
set termencoding=utf-8
"设置vim内部编码
set encoding=utf-8
"设置写入文件时编码
set fileencoding=utf-8

"设置字体，字体中的空格要转义或用下划线代替
if(g:iswindows==1)
    set guifont=等距更纱黑体_TC_LIGHT:h11
elseif has("unix")
    set guifont=Andale\ Mono\ 12
endif

"设置编码后重新加载菜单，否则菜单乱码
if(g:iswindows==1)
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    "提示信息乱码
    language messages zh_CN.utf-8
endif

" GUI 设置
if has("gui_running")
    au GUIEnter * simalt ~x " 窗口启动时自动最大化
    set guioptions=''
endif

"没有字节序标记 Byte Order Mark 
set nobomb
"显示行号 number
set nu
" 启用相对行号 relativenumber
set rnu
"搜索不区分大小写
set ic

"高亮搜索
set hlsearch
"搜索输入文字时实时匹配
set incsearch

"设置softtab
set softtabstop=4
"tab设置为4个空格
set tabstop=4
"自动缩进为4个空格
set shiftwidth=4
"tab替换为空格
set expandtab

" 允许不保存切换buffer
set hidden
"不产生备份文件
set nobackup
set nowritebackup
"不产生撤销文件
set noundofile
"不产生swp临时文件
set noswapfile

" Persistent undo
"set undofile
"set undodir=$HOME/.vim/undo
"set undolevels=1000
"set undoreload=10000

"默认以双字节处理东亚字符
if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
    set ambiwidth=double
endif

"高亮语法
"syntax enable
let python_highlight_all=1
syntax on

"禁止拼写检查
set nospell

"设置文件换行格式
set ff=unix
set ffs=unix,dos

"高亮光标所在行
set cursorline
highlight Cursor guifg=white guibg=black

"设置文本自动换行宽度 textwidth
set tw=80
set linebreak
"设置列宽提示 ColorColumn，+1 表示高亮 textwidth 后面的一列
set cc=+1
"改变 ColorColumn 默认颜色
"hi ColorColumn ctermbg=lightgrey guibg=lightgrey

"设置自动换行选项 formatoptions，具体含义 help formatoptions, help fo-table
set fo-=l
set fo+=t
set fo+=m
set fo+=M
set fo+=n
set fo+=j

" 复制到系统剪贴板
nmap <C-Insert> ^v$h"*y
imap <C-Insert> <Esc>"*yyi
vmap <C-Insert> "*y

"visual模式下按 * 直接搜索选中的字符，
"但有个bug未处理，就是被搜索字符中不能包含 /
vmap * <C-Insert>/<S-Insert><CR>

"取消 ctrl + q 映射
nmap <C-q> <Nop>
nmap <C-Up> <Nop>
nmap <C-Down> <Nop>

" 编辑配置文件
command Vimrc e $HOME\\_vimrc
" 重新加载配置文件
command So source $HOME\\_vimrc
" 新文件
command E enew | pwd
command S Startify

"折叠代码中的 class、function 等代码块
set foldmethod=indent
set foldlevel=99

"更改折叠代码块默认的快捷键
"nnoremap <Space> za

" 插入空行
nnoremap [<Space> O<ESC>j
nnoremap ]<Space> o<ESC>k
nnoremap [] O<ESC>jo<ESC>k

"vim-surround 添加双引号快捷键
nmap [" ysiw"
nmap [' ysiw'
nmap [[ ysiw[

" 启用命令行自动补全增强模式
set wildmenu
set wildmode=longest:list,full

" 启用智能感知
set omnifunc=syntaxcomplete#Complete
" imap <silent> ` <C-X><C-O>

" 缓存快捷键
function! GetNChar()
     let l:number = 3
     let l:string = ""

     while l:number > 0
       let l:string .= nr2char(getchar())
       let l:number -= 1
     endwhile

     echo l:string
endfunction

" 未实现不用回车直接触发功能
"nnoremap gb :ls<CR>:buffer<Space>call GetNChar()<CR>
"nnoremap gb :ls<CR>:buffer<Space>
nnoremap <C-n> :bnext<CR>
nnoremap <C-p> :bprevious<CR>
nnoremap <C-x> :bdelete<CR>
nnoremap <S-x> :bdelete!<CR>

" autowrite
set autowrite

set backspace=indent,eol,start

" 新窗口的默认位置，若是水平切割则位于下方，垂直切割则位于右方
set splitbelow
set splitright

" 超长换行快捷键
"nmap , VQ
" 搜索后去除高亮
nmap <BackSpace> :nohl<cr>

" 中文模式下输入的 ·改为英文的 `
" 主要用于 markdown 的代码块，避免切换输入法
imap · `
imap （ (
imap ） )
imap ？ ?
imap ‘ '
imap ’ '

" gvimfullscreen  ==========================================================={{{
" https://github.com/asins/gvimfullscreen_win32
" 将 gvimfullscreen.dll 复制到gvim安装目录下，与gvim.exe同目录
" {{{ Win平台下窗口全屏组件 gvimfullscreen.dll
" Vim启动的时候自动使用当前颜色的背景色以去除Vim的白色边框
if has('gui_running') && has('gui_win32') && has('libcall')
    let g:MyVimLib = 'gvimfullscreen.dll'
    function! ToggleFullScreen()
        call libcall(g:MyVimLib, 'ToggleFullScreen', 1)
    endfunction

    let g:VimAlpha = 240
    function! SetAlpha(alpha)
        let g:VimAlpha = g:VimAlpha + a:alpha
        if g:VimAlpha < 180
            let g:VimAlpha = 180
        endif
        if g:VimAlpha > 255
            let g:VimAlpha = 255
        endif
        call libcall(g:MyVimLib, 'SetAlpha', g:VimAlpha)
    endfunction

    let g:VimTopMost = 0
    function! SwitchVimTopMostMode()
        if g:VimTopMost == 0
            let g:VimTopMost = 1
        else
            let g:VimTopMost = 0
        endif
        call libcall(g:MyVimLib, 'EnableTopMost', g:VimTopMost)
    endfunction

    " 映射 shift+Enter 切换全屏vim
    "map <s-enter> <esc>:call ToggleFullScreen()<cr>
    " 切换Vim是否在最前面显示
    "nmap <s-r> <esc>:call SwitchVimTopMostMode()<cr>
    " 增加Vim窗体的不透明度
    "nmap <s-t> <esc>:call SetAlpha(10)<cr>
    " 增加Vim窗体的透明度
    "nmap <s-y> <esc>:call SetAlpha(-10)<cr>

    " 默认设置透明
    "autocmd GUIEnter * call libcallnr(g:MyVimLib, 'SetAlpha', g:VimAlpha)
    " 默认全屏
    "autocmd GUIEnter * call libcallnr(g:MyVimLib, 'ToggleFullScreen', 1)
endif

" }}}


" lightline 的 bufferline 需要下列设置
set showtabline=2
if has('gui_running')
    set guioptions-=e " Don’t use GUI tabline
endif
set laststatus=2  " Basic

" lightline setup ==========================================================={{{
let g:lightline = {}
let g:lightline.active = {
    \ 'left': [ [ 'mode', 'paste' ],
    \           [ 'readonly', 'filename', 'modified' ],
    \           [ 'cocstatus'] ],
    \ 'right': [ [ 'percent' ],
    \            [ 'lineinfo' ],
    \            [ 'fileformat', 'fileencoding', 'filetype' ],
    \            [ 'gitstatus', 'blame' ] ] }
let g:lightline.inactive = {
    \ 'left': [ [ 'filename' ] ],
    \ 'right': [ [ 'lineinfo' ],
    \            [ 'percent' ] ] }
let g:lightline.tabline = {
    \ 'left': [ [ 'buffers' ] ],
    \ 'right': [ [ 'close' ] ] }

let g:lightline#bufferline#show_number  = 2
let g:lightline#bufferline#number_map = {
\ 0: '⁰', 1: '¹', 2: '²', 3: '³', 4: '⁴',
\ 5: '⁵', 6: '⁶', 7: '⁷', 8: '⁸', 9: '⁹'}

let g:lightline#bufferline#shorten_path = 0
let g:lightline#bufferline#unnamed      = '[No Name]'
let g:lightline#bufferline#modified = ' *'
let g:lightline#bufferline#filename_modifier = ':t'
"let g:lightline#bufferline#enable_devicons = 1

let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type   = {'buffers': 'tabsel'}

let g:lightline.component_function = {
    \   'cocstatus': 'coc#status',
    \   'gitstatus': 'LightlineGitStatus',
    \   'blame': 'LightlineGitBlame',
    \ }

function! LightlineGitStatus() abort
  return get(b:, 'coc_git_status', '')
endfunction

function! LightlineGitBlame() abort
  let blame = get(b:, 'coc_git_blame', '')
  " return blame
  return winwidth(0) > 120 ? blame : ''
endfunction


autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()
" }}}


" vim-go==================================================================={{{
"
" let g:go_def_mode='gopls'
" let g:go_info_mode='gopls'
" let g:go_list_type = "quickfix"
" autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')
" autocmd FileType go nmap <leader>b  <Plug>(go-build)
" autocmd FileType go nmap <leader>r  <Plug>(go-run)
"
"}}}

" coc.nvim================================================================={{{
"

"if (index(['go'], &filetype) >= 0)

" Give more space for displaying messages. 状态栏高度
"set cmdheight=2

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use D to show documentation in preview window.
"let g:go_doc_keywordprg_enabled = 0
"nnoremap <silent> D :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (index(['go'], &filetype) >= 0)
    execute 'GoDoc '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

"" Mappings using CoCList:
""nnoremap <silent> <space>g :<C-u>CocList --normal gstatus<CR>
nnoremap <silent> ,e :<C-u>CocList files<CR>
nnoremap <silent> ,r :<C-u>CocList mru<CR>
"nnoremap <silent> <space>b :<C-u>CocList buffers<CR>
"nnoremap <silent> <space>g :<C-u>CocList<CR>
"" Show all diagnostics.
"nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions.
"nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
"" Show commands.
"nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document.
"nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols.
"nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item.
"nnoremap <silent> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item.
"nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list.
"nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

function! SetupCommandAbbrs(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction

" Use :C to open coc config
call SetupCommandAbbrs('C', 'CocConfig')
call SetupCommandAbbrs('L', 'CocList')
""}}}
"endif

" coc.nvim 自动补全========================================================={{{
"
" 插入模式下使用 <c-p> 强制触发补全: 
inoremap <silent><expr> <c-p> coc#refresh()

" 使用 <Tab><S-Tab> 在自动完成项中导航
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

" 使用 <cr> 确认自动完成项
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<cr>"
" 在没有选中任何项时，回车则选中第一项
"inoremap <silent><expr> <CR> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
" 默认使用 <C-y> 确认自动完成项，可改为回车
inoremap <silent><expr> <CR> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" 自动完成后关闭预览窗口
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" Markdown 文件禁用补全，打中文稍快就出错
autocmd FileType markdown let b:coc_suggest_disable = 1
autocmd FileType vimwiki let b:coc_suggest_disable = 1

"}}}
"
" coc-snippets=========================================={{{
"
" 使用 <C-l> 快速扩展代码片段
imap <C-l> <Plug>(coc-snippets-expand)

" 使用 <Tab><S-Tab> 在代码片段中导航
let g:coc_snippet_next = '<tab>'
let g:coc_snippet_prev = '<S-tab>'

"}}}

" Pangu 自动规范化中英文
"autocmd BufWritePre *.markdown,*.md,*.text,*.txt,*.wiki,*.cnx call PanGuSpacing()

" Vim-Easy-Align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" 可视模式下不包含最后的换行符
"vnoremap gm gmh
"vnoremap $ $h

" 启用 Vim 自带的代码块高亮显示
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
let g:markdown_syntax_conceal = 0
let g:markdown_minlines = 100

" Markdown
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_toc_autofit = 1

" 目录树 defx 依赖插件 roxma/nvim-yarp 需要
"let g:python3_host_prog = "C:/Python37/python.exe"

" 目录树 defx 设置，基本为官方文档的配置
"let g:maplocalleader=';'
"nnoremap <silent> <LocalLeader>e
"            \ :<C-u>Defx -resume -toggle -buffer-name=tab`tabpagenr()` <CR>
"nnoremap <silent> <LocalLeader>a
"            \ :<C-u>Defx -resume -buffer-name=tab`tabpagenr()` -search=`expand('%:p')`<CR>
"
"call defx#custom#option('_', {
"            \ 'columns': 'indent:git:icons:filename',
"            \ 'winwidth': 50,
"            \ 'split': 'vertical',
"            \ 'direction': 'topleft',
"            \ 'show_ignored_files': 0,
"            \ 'root_marker': '≡ ',
"            \ 'ignored_files':
"            \     '.mypy_cache,.pytest_cache,.git,.hg,.svn,.stversions'
"            \   . ',__pycache__,.sass-cache,*.egg-info,.DS_Store,*.pyc,*.swp'
"            \ })
"
"autocmd FileType defx call s:defx_my_settings()
"function! s:defx_my_settings() abort
"  " Define mappings
"  nnoremap <silent><buffer><expr> <CR>
"  \ defx#do_action('drop')  " 在右侧打开，open 则为当前窗口打开 
"  nnoremap <silent><buffer><expr> c
"  \ defx#do_action('copy')
"  nnoremap <silent><buffer><expr> m
"  \ defx#do_action('move')
"  nnoremap <silent><buffer><expr> p
"  \ defx#do_action('paste')
"  nnoremap <silent><buffer><expr> l
"  \ defx#do_action('open')
"  nnoremap <silent><buffer><expr> E
"  \ defx#do_action('open', 'vsplit')
"  nnoremap <silent><buffer><expr> P
"  \ defx#do_action('open', 'pedit')
"  nnoremap <silent><buffer><expr> o
"  \ defx#do_action('open_or_close_tree')
"  nnoremap <silent><buffer><expr> K
"  \ defx#do_action('new_directory')
"  nnoremap <silent><buffer><expr> N
"  \ defx#do_action('new_file')
"  nnoremap <silent><buffer><expr> M
"  \ defx#do_action('new_multiple_files')
"  nnoremap <silent><buffer><expr> C
"  \ defx#do_action('toggle_columns',
"  \                'mark:indent:icon:filename:type:size:time')
"  nnoremap <silent><buffer><expr> S
"  \ defx#do_action('toggle_sort', 'time')
"  nnoremap <silent><buffer><expr> d
"  \ defx#do_action('remove')
"  nnoremap <silent><buffer><expr> r
"  \ defx#do_action('rename')
"  nnoremap <silent><buffer><expr> !
"  \ defx#do_action('execute_command')
"  nnoremap <silent><buffer><expr> x
"  \ defx#do_action('execute_system')
"  nnoremap <silent><buffer><expr> yy
"  \ defx#do_action('yank_path')
"  nnoremap <silent><buffer><expr> .
"  \ defx#do_action('toggle_ignored_files')
"  nnoremap <silent><buffer><expr> ;
"  \ defx#do_action('repeat')
"  nnoremap <silent><buffer><expr> h
"  \ defx#do_action('cd', ['..'])
"  nnoremap <silent><buffer><expr> ~
"  \ defx#do_action('cd')
"  nnoremap <silent><buffer><expr> <Esc>
"  \ defx#do_action('quit')
"  nnoremap <silent><buffer><expr> <Space>
"  \ defx#do_action('toggle_select') . 'j'
"  nnoremap <silent><buffer><expr> *
"  \ defx#do_action('toggle_select_all')
"  nnoremap <silent><buffer><expr> j
"  \ line('.') == line('$') ? 'gg' : 'j'
"  nnoremap <silent><buffer><expr> k
"  \ line('.') == 1 ? 'G' : 'k'
"  nnoremap <silent><buffer><expr> <C-l>
"  \ defx#do_action('redraw')
"  nnoremap <silent><buffer><expr> <C-g>
"  \ defx#do_action('print')
"  nnoremap <silent><buffer><expr> cd
"  \ defx#do_action('change_vim_cwd')
"endfunction

" 命令别名帮助文件垂直分隔
cabbrev h vert h

" 让 Vim 正确显示 JSON 文件注释语法
autocmd FileType json syntax match Comment +\/\/.\+$+

" vim-gitgutter 比默认的命令增加了 zz
nmap ]c <Plug>(GitGutterNextHunk)zz
nmap [c <Plug>(GitGutterPrevHunk)zz

" 使用正则提取内容
function! KeepLines(pattern)
    let pattern = a:pattern
    let hits = []
    exec '%s/' . pattern . '/\=add(hits, submatch(0))/ge'
    let str = join(hits, "\n") . "\n"
    %d
    put! = str
endfunction
command! -nargs=1 KeepLines call KeepLines(<f-args>)

" Markdown 插件 ======================================================{{{
"
" plasticboy/vim-markdown
autocmd FileType markdown let b:sleuth_automatic=0
autocmd FileType markdown set conceallevel=0
autocmd FileType markdown normal zR

let g:vim_markdown_frontmatter=1

" iamcco/markdown-preview 
nmap <M-m> <Plug>MarkdownPreviewToggle
"
"}}}
"

" 常用工作目录
command TCM lcd d:\git-repo\Common-sense-of-life
command IT lcd d:\git-repo\shenlin.ltd\source\_posts

" 切换到 Buffer 时自动切换工作目录
autocmd BufEnter * silent! lcd %:p:h

" 帮助文件中的链接导航
autocmd FileType help nmap <CR>  <C-]>
autocmd FileType help nmap <BS>  <C-o>

" 默认启用 wellle/context 上下文插件
let g:context_enabled = 0

" python 和 go 文件才使用缩进, json 文件中会不显示引号很烦人
let g:indentLine_fileType = ['python', 'go']
" indentLine 颜色不使用 colorscheme 的方案
let g:indentLine_setColors = 1

" vimwiki 快捷键
nmap <Leader>wk <Plug>VimwikiIndex
autocmd FileType vimwiki nmap <Space> <Plug>VimwikiToggleListItem

" easymotion
nmap ss <Plug>(easymotion-bd-f2)
nmap sa <Plug>(easymotion-jumptoanywhere)

nmap sl <Plug>(easymotion-bd-wl)
nmap si <Plug>(easymotion-bd-fl)
nmap sp :PYSearch<cr>

nmap sj <Plug>(easymotion-j)
nmap sk <Plug>(easymotion-k)

" 和系统公用剪贴板
"set clipboard=unnamed 

" vim-auto-save
let g:auto_save = 0  " enable AutoSave on Vim startup
let g:auto_save_no_updatetime = 1  " do not change the 'updatetime' option
let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
" let g:auto_save_silent = 1  " do not display the auto-save notification

" 在 textwidth 处插入换行符
nmap ,, gqq

" 保存快捷键
nmap <Leader>s :w<Cr>

" 添加单引号、双引号、反引号、空格等快捷键
nmap <Leader><Space> ysiw<Space><Space>
vmap <Space> S<Space><Space>

nmap <Leader>` ysiW`
vmap ` S`

nmap <Leader>' ysiW'
vmap ' S'

nmap <Leader>" ysiW"
" 快捷键使用一个分号，则和默认的访问系统剪切板冲突，和 ctrl + insert 快捷键冲突
vmap "" S"

nmap <Leader>( ysiW(
vmap ( S(

nmap <Leader>[ ysiW{
vmap [ S[

nmap <Leader>{ ysiW{
vmap { S{

" 记忆光标位置
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
